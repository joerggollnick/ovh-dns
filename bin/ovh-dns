#!/usr/bin/env bash

# original code @ https://github.com/denouche/ovh-dyndns

# DEFAULT CONFIG
API_TARGET="EU"
FIELDTYPE="A"
TTL=60

help()
{
    echo
    echo "Help: possible arguments are:"
    echo "  --ip <ip>               : the ip address for this record"
    echo "  --domain <domain>       : the domain on which update the record in the DNS zone"
    echo "  --subdomain <subdomain> : (optional) the subdomain for this record"
    echo "  --fieldtype <fieldtype> : (optional) type for this record (default is A)"
    echo "  --ttl <ttl>             : (optional) time to live value for this record (default is 60)"
    echo "  --target <target>       : (optional) the target API endpoint (default is EU)"
    echo
}

checkInternetConnexion()
{
    ping -c1 -w2 8.8.8.8 &> /dev/null
    if [ $? -ne 0 ]
    then
        exit 2
    fi
}

requestApi()
{
    URL=$1
    METHOD=$2
    DATA=$3

    PARAMS=("--target")
    PARAMS+=("$API_TARGET")

    PARAMS+=("--url")
    PARAMS+=("$URL")

    if [ "$METHOD" ]
    then
        PARAMS+=("--method")
        PARAMS+=("$METHOD")
    fi

    if [ "$DATA" ]
    then
        PARAMS+=("--data")
        PARAMS+=("$DATA")
    fi
    RESPONSE=$( ovh-api-client "${PARAMS[@]}" )
    HTTP_STATUS="$( echo $RESPONSE | cut -d' ' -f1 )"
    HTTP_RESPONSE="$( echo $RESPONSE | cut -d' ' -f2- )"
    echo $HTTP_STATUS
}

parseArguments()
{
    while [ $# -gt 0 ]
    do
        case $1 in
        --ip)
            shift
            IP=$1
            ;;
        --domain)
            shift
            DOMAIN=$1
            ;;
        --subdomain)
            shift
            SUBDOMAIN=$1
            ;;
        --fieldtype)
            shift
            FIELDTYPE=$1
            ;;
        --ttl)
            shift
            TTL=$1
            ;;
        esac
        shift
    done
}

checkArgumentsValidity()
{
    if [ -z $DOMAIN ]
    then
        echo "No domain given"
        help
        exit 1
    fi

    if [ -z $IP ]
    then
        echo "No IP address given"
        help
        exit 1
    fi
}

refreshZone()
{
    requestApi "/domain/zone/$DOMAIN/refresh" 'POST' > /dev/null
}

getIds ()
{
    requestApi "/domain/zone/$DOMAIN/record?subDomain=$SUBDOMAIN&fieldType=$FIELDTYPE" > /dev/null
    if [ $HTTP_STATUS -ne 200 ]
    then
        echo "Error: $HTTP_STATUS $HTTP_RESPONSE"
        exit 1
    fi
    IDS="$HTTP_RESPONSE"
}

main()
{
    parseArguments "$@"
    checkArgumentsValidity
    checkInternetConnexion

    getIds

    if [ $(echo $IDS | jq length) -gt 1 ]
    then
        echo "Error, multiple results found for record"
        echo "$IDS"
        i=0
        while [ $i -lt $(echo $IDS | jq length) ]
        do
            CURRENT_ID=$(echo $IDS | jq ".[$i]")
            requestApi "/domain/zone/$DOMAIN/record/$CURRENT_ID" 'DELETE' > /dev/null
            i=$((i+1))
        done
        echo "All results were deleted, will create a new record"
        getIds
    fi

    if [ $(echo $IDS | jq length) -eq 0 ]
    then
        # No record found, create one
        requestApi "/domain/zone/$DOMAIN/record" 'POST' '{"target": "'$IP'", "subDomain": "'$SUBDOMAIN'", "fieldType": "'$FIELDTYPE'", "ttl": '$TTL'}' > /dev/null
        refreshZone
        exit 0
    fi

    RECORD=$(echo $IDS | jq '.[0]')
    requestApi "/domain/zone/$DOMAIN/record/$RECORD" > /dev/null
    if [ $HTTP_STATUS -ne 200 ]
    then
        echo "Error: $HTTP_STATUS $HTTP_RESPONSE"
        exit 1
    fi
    RECORD_IP=$(echo $HTTP_RESPONSE | jq -r '.target')

    if [ $IP != $RECORD_IP ]
    then
        requestApi "/domain/zone/$DOMAIN/record/$RECORD" 'PUT' '{"target":"'$IP'", "ttl": '$TTL'}' > /dev/null
        refreshZone
    fi
}

main "$@"
